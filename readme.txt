concurrenthashMap

1.7 采用Segment锁分段数组+链表，Segment继承ReentrantLock用来充当锁的角色
1.8 取消了分段锁机制，从而实现了对每一行数据进行加锁，进一步减少并发冲突的概率，table数组+单向链表+红黑树


hashMap

1.7 底层是一个entry数组以及多个链表实现，hash时候以链表的形式存储，如果上千个节点在hash时发生碰撞，存储在亿一个链表中，查找时间O(N)，jdk8解决了这个问题
1.8 底层是entry数组+链表/红黑树，当一个hash值的节点数不小于8的时候就不在采用链表存储了

链表
定位速度快、新增、删除效率高，需要预先分配内存，占用内存大，

红黑树
占用内存小，只需要给存在的元素分配内存，红黑树是有序的，map求并集、交集、差集 大量操作效率高

jdk8 的hashMap的实现兼容了这两种数据结构的长处